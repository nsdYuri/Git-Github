O que é o Git?
É um sisetma de controle de versão. Permitindo com que os programadores controlem a versão
de seus códigos através do próprio computador e sincronizar as mudanças e alterações para
um servidor remotamente. Isso possibilita o desenvolvimento coletivo entre programadores em
um repositório único sem que um atrapalhe o outro.

.gitignore:
Começa com ponto pois é um arquivo oculto. Quando incializamos o git em um diretório, todos as
pastas e arquivos serão rastradas pelo git e entraram no controle de versionamento, existem situações
em que não é necessário que certas pastas ou arquivos sejam versionados ou até mesmo subam para um repositório
remoto. Pensando nisso, o arquivo ".gitignore" serve para informarmos tudo aquilo que queremos que o Git ignore.
Através do site "gitignore.io" é possivel informar a linguagem de desenvolvimento e o sistema gera automaticamente
um exemplo de gitignore para um projeto com aquela respectiva linguagem.

README.md:
O README é um arquivo com extensão .md, ou seja, ele é escrito em Markdown que é uma linguagem de marcação utilizada 
para converter o texto em um HTML válido. A função desse arquivo é apresentar informações do projeto, como: Descrição 
do seu projeto, Funcionalidades, Como os usuários podem utilizá-lo, Onde os usuários podem encontrar ajuda sobre seu projeto,
Autores do projeto. É legal documentar o projeto para quem for visitar seu repositório saiba do que se trata.

HEAD:
Sera muito visto no terminal, principalmente quando executamos o comando git log, HEAD indica a fase atual do projeto, então logo
após o hash do commit, o git ira informar com esse apelido HEAD, na qual commit se encontra o projeto.

Branch:
Nada mais nada menos que uma ramificação, essencial para tornar o trabalho simultanêo entre membros da mesma equipe mais facil. 
Esse conceito consiste em criar uma "cópia" do projeto onde nela o desenvolvedor consegue fazer teste, criar novas Funcionalidades e etc
sem que comprometa o projeto final ou atrapalhe outra pessoa atuando no mesmo projeto. Dessa maneira, com cada um tendo sua branch, é mais
eficiente para equipe pois está cada um fazendo oque deve em sua determinada ramificação e ao final do projeto apenas juntam tudo na versão
final principal(main).

