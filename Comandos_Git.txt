Comandos Git

git config --global user.name "nome":
Comando que armazena nas configurações do git o nome do usuário que está operando naquele repositório
'--global' serve para a maquina salvar que toda vez que o git for aberto, sera o mesmo usuario.

    git config user.name:
    Exibe na tela o nome do usuário 

git config --global.user.emal "email":
Comando que armazena nas configurações do git o email do usuário que está operando naquele repositório
'--global' serve para a maquina salvar que toda vez que o git for aberto, sera o mesmo usuario.

    git config user.email:
    Exibe na tela o email do usuário 

git init:
Comando que serve para inicializr o controle de versão git no repositório.
Normalmente é o primeiro comando que utilizamos ao criar um repositório. Ele basicamente
transforma um diretório comum em um repositório Git, que apartir desse momento irá aceitar
e executar seus comandos.
OBS: Os comandos Git devem ser executados dentro do diretório do projeto. Caso for executados
mais deuma vez em um repositório ja inicializado, nenhum progresso ou histórico sera perdido, 
será apenas exibido uma mensagem dizendo que o repositório foi reinicializado.

git branch -M main:
Esse comando irá criar uma branch (ramificação) chamada main, que normalmente é a branch principal
utilzada em projetos, é nela onde se tem o costume de guardar o código do projeto final.
É necessário executarmos esse comando porque por padrão o git inicializa criando uma branch chamada (master)
ela não é utitlizada, por isso fazemos essa troca para a branch main. 

    git config --global init.defaultBranch main:
    Comando que ao executado, define a branch padrão para futuras inicializações de repositório como "main".

git remote add apelido(origin) "url do repositório remoto":
É a partir desse comando que começamos a linkar o repositório local com o remoto. Após criar um repositório no
Github, basta copiar a url disponibilizada e colar entre as aspas desse comando, isso irá indicar para o git qual 
é a referencia remota daquele repositório local. O remoto é oque permite a acessibilidade do código salvo em qualquer
outra máquina.
    
    git remote -v:
    Exibe a url do repositório remoto na qual o git esta sincronizado, caso execute esse comando sem adicionar nenhum repositório
    remoto, nada sera exibido.
    
    git remote remove apelido(origin):
    Serve para remover um repositório remoto espeficico.

    git remote set-url apelido(origin) "url":
    Utilizado para realizar a atualização na url do repositório remoto se caso necessário.

    git remote rename apelido(origin) "novo-apelido":
    Caso deseje renomear o apelido de um repositório rmeoto.


git status:
Comando que informa na tela qual o status atual do repositório, no caso em qual estágio se encontra os arquivos nele presentes.
Para se entender os estágios é necessário ter noção do fluxo de versionamento do git.
    1° Work Directory - É quando os arquivos são modificados, excluidos ou adicionados.
    2° Staging Area - Etapa onde são adicionados os arquivos preparados para o versionamento.
    3° Repository - Arquivos salvos.
    4° Remote Repository - Após os arquivos subirem para o repositório remoto.
Os estágios são:
Nothing to commit - É o quando não há nennhuma alteração identificada 
Untracked files - Um estágio antes de serem adicionados, é quando algum arquivo é modificado, excluido ou adicionado.
Changes to be committed - Quando o arquivo é adicionado e está pronto pra ser commitado.
Commit - É a mensagem incluida para registrar oque foi modificado naquela versão do arquivo.

git add "nome do arquivo.seu formato":
É o comando que adiciona os arquivos para a Stanging Area, nesse momento o sistema informa que existem mudanças para
serem commitadas (Changes to be committed). Caso for preciso adiconar mais de um arquivo, basta incluir um ponto após 
o add (git add .).

git commit -m "mensagem do commit":
É utilizado para reazliar o famoso commit, salvando as alterações e indo para a parte Repository do fluxo. Fazendo com que o sistema volte 
para o estágio de Nothing to commit depois dessa ação, basicamente salva as alterações realizadas com uma mensagem que normalmente indica aquilo 
que foi aleterado.

    git commit --amend -m "mensagem correta"
    Serve para alterar o nome do commit mais recente realizado. O parametro --amend indica ao Git que não é um novo commit, e sim apenas uma alteração
    na mensagem.

    git revert "id commit":
    Realiza a reversão das mudanças estabelecidas no commit ferente ao id indicado. Assim que essa reversão é feita, é gerado mais um commit em cima 
    daquele que foi desfeito.

    git reset --hard "id commit anterior ao que se deseja apagar":
    Apaga o commit seguinte ao referenciado pelo id, basicamente esse comando reseta o código até o ultimo commit anterior ao que vai ser apagado, lite-
    ralmente o ignorando.


git log:
Exibe na tela todos os commits realizados naquele repositório, nesse histórico é possivel ver o id dos commits, eles são necessários caso seja preciso
reverter algum deles.

    git log --oneline:
    Apresenta um log mais uniforme, de maneira bem mais resumida, apenas exibindo o inicio do hash(id) e a mensagem de cada commit.

    git log -p:
    Nesse caso serpa exibido um log muito mais detalhado, trazendo as diff(diferenças) e até mesmo oque foi alterado.

    git log --graph

git push origin main:
Por fim, este comando sobe os commits realizados para repositórios remoto entrando no fluxo de Remote Repository.

git clone "url":
Com esse comando é possivel clonar o repositório remoto em um diretório local em uma maquina diferente, tornando possivel o acesso direto de outro diretório
local.

git pull apelido(origin) branch(main)
Comando usado para buscar e baixar conteúdo de repositórios remotos e fazer a atualização imediata ao repositório local para que os conteúdos sejam iguais.
Isso é necessário quando outro desenvolvedor fez alterações e subiu elas no repositório remoto, quando quisermos desenvolver nossa parte e precisamos da versão
mais atualizada do projeto o pull atualiza nosso repositório local com as novas alterações feitas no remoto.

git merge